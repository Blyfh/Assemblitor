{
    "info": {
        "name":    "English (United States)",
        "version": "1.0",
        "authors": ["Blyfh"]
    },
    "file_mng": {
        "AsmFiles":     "Assembler files",
        "TxtFiles":     "Text files",

        "UnsavedChanges": "Unsaved Changes",
        "Save?":          "Save program before exiting?",

        "OpenFile": "Open File",
        "SaveFile": "Save File"
    },
    "gui": {
        "title": "Assemblitor",
        "minsize": (637, 500),

        "File":     "File",
        "Open":     "Open",
        "Reload":   "Reload",
        "Save":     "Save",
        "SaveAs":   "Save As",
        "Options":  "Options",
        "Exit":     "Exit",

        "Help":      "Help",
        "Assembly":  "Assembly",
        "Shortcuts": "Shortcuts",
        "DemoPrg":   "Demo Program",
        "About":     "About",

        "Run":      "Run",
        "StepMode": "Step-By-Step Mode",

        "PC:":  "Program Counter:",
        "ACC:": "Accumulator:",
        "IR:":  "Instruction Register:"
    },
    "opt_win": {
        "title": "Options",
        "geometry": "400x500",

        "Appearance": "Appearance",
        "LightTheme": "Light theme"
    },
    "asm_win": {
        "title": "Assembly",
        "minsize": (710, 200),

        "text":  """This Assembly dialect is a very low-level column-oriented programming language that is close to machine code. It is not case-sensitive.

The language consists of a sequence of memory cells that can store values or commands. Each memory cell starts with its address and ends with a line break. The memory cells have to be in increasing order but empty memory cells don't have to be displayed. A value has to be stored after the address as an integer. An empty memory cell will be interpreted as having a value of 0. A command is also stored after the address, with some of them requiring operands to work.
Comments can be made with a semicolon. All text between the semicolon and the next line break will be ignored by the computer.

The program orients itself to the architecture of a Von-Neumann processor. This means it takes usage of the program counter (PC), the accumulator (ACC) and the instruction register (IR). The PC is set to 0 by default. If the program is executed, the command at the address stored in the PC will be loaded into the IR. There the command can be executed. After its execution the PC gets increased by one (excluding jumps and stops) and the next command can be loaded into the IR.


A simple program may look like this:
{    00 LDA 04 ; load the value of the 4th memory cell into the ACC
    01 STA 05 ; store the value of the ACC into the 5th memory cell
    02 STP    ; stop the program
    04 42     ; a stored value
}
This would be the result after executing the program:
{    00 LDA 04
    01 STA 05
    02 STP
    03        ; <--- Notice how the formerly hidden 3rd memory cell is now displayed
    04 42
    05 42
}

A list of all accepted commands:
    {STP    } - stops the program
    {LDA n  } - loads the value at memory cell n into the ACC
    {LDA #n } - loads the value n into the ACC
    {LDA (n)} - loads the value of the memory cell that has the address that is stored in memory cell n into the ACC
    {STA n  } - stores the value of the ACC into memory cell n
    {ADD n  } - adds the value at memory cell n to the value of the ACC and stores the result into the ACC
    {SUB n  } - subtracts the value at memory cell n from the value of the ACC and stores the result into the ACC
    {MUL n  } - multiplies the value at memory cell n by the value of the ACC and stores the result into the ACC
    {JMP n  } - jumps to memory cell n by setting the PC to n
    {JZE n  } - jumps to memory cell n by setting the PC to n if the value of the ACC is equal to zero
    {JLE n  } - jumps to memory cell n by setting the PC to n if the value of the ACC is less than or equal to zero"""
    },
    "shc_win": {
        "title":    "Shortcuts",
        "geometry": "272x110",

        "combos": """Ctrl + Enter
Shift + Enter
Ctrl + O
F5
Ctrl + S
Ctrl + Shift + S""",

        "actions": """Run program
Line break without new address
Open file
Reload file
Save file
Save file as"""
    },
    "abt_win": {
        "title":    "About",
        "geometry": "310x140",

        "text": """    A simple emulator and editor for Assembly
    Version: 0.1 Alpha
    Made by Blyfh in 2022

    Found a bug? Tell me on
    https://github.com/Blyfh/assemblitor/issues/new
        """
    },
    "demo": """; A simple countdown program
00 JMP 03
01 5
02 1
03 LDA 01
04 SUB 02
05 JLE 08
06 STA 01
07 JMP 04
08 STP"""
}