{
    "info": {
        "name":    "English (United States)",
        "version": "1.0",
        "authors": ["Blyfh"]
    },
    "file_mng": {
        "AsmFiles": "Assembler files",
        "TxtFiles": "Text files",

        "UnsavedChanges": "Unsaved Changes",
        "Save?":          "Save program before exiting?",

        "OpenFile": "Open File",
        "SaveFile": "Save File"
    },
    "gui": {
        "title":   "Assemblitor",
        "minsize": (637, 500),

        "File":     "File",
        "Open":     "Open",
        "Reload":   "Reload",
        "Save":     "Save",
        "SaveAs":   "Save As",
        "Options":  "Options",
        "Exit":     "Exit",

        "Help":      "Help",
        "Assembly":  "Assembly",
        "Shortcuts": "Shortcuts",
        "DemoPrg":   "Demo Program",
        "About":     "About",

        "RunPrg":       "Run program",
        "RunStep":      "Run single step",
        "IncrAdrs":     "Increment selected addresses",
        "DecrAdrs":     "Decrement selected addresses",
        "IncrAdrsOprs": "Increment selected addresses and operands",
        "DecrAdrsOprs": "Decrement selected addresses and operands",
        "IncrOprs":     "Increment selected operands",
        "DecrOprs":     "Decrement selected operands",
        "ChngOptions":  {"adr": "Addresses", "adr_opr": "Addresses & operands", "opr": "Operands"},

        "PC:":  "Program Counter:",
        "ACC:": "Accumulator:",
        "IR:":  "Instruction Register:"
    },
    "opt_win": {
        "title":    "Options",
        "geometry": "450x500",

        "Appearance": "Appearance",
        "LightTheme": "Light theme",
        "Language":   "Language",
        "EditorFont": "Editor font",

        "Assembler": "Assembler",
        "MinAdrLen": "Minimum number of digits",
        "MaxCels":   "Maximum program length",
        "MaxJmps":   "Maximum iteration depth",

        "File":                  "File",
        "ClosingUnsaved":        "Action on closing unsaved program",
        "ClosingUnsavedOptions": {"ask": "Ask to save", "save": "Always save", "discard": "Always discard"},

        "Advanced":   "Advanced",
        "DevMode":    "Developer Mode",
        "DevModeTip": "Shows error traceback, fully displays internal errors, prints errors to console, always closes unsaved programs",

        "RestartRequired": "You have to restart Assemblitor in order to properly apply your changes",

        "Cancel":  "Cancel",
        "Apply":   "Apply",
        "Ok":      "OK",
        "Restart": "Restart",
        "Reset":   "Reset"
    },
    "asm_win": {
        "title":   "Assembly",
        "minsize": (665, 200),

        "text":  """This Assembly dialect is a low-level column-oriented programming language that is close to machine code. It is case-insensitive.

The language consists of a sequence of memory cells (MCs) that can store values or commands. Each MC starts with its address and ends with a line break. The MCs have to be in increasing order but empty ones don't have to be displayed. A value has to be stored after the address as an integer. An empty MC will be interpreted as having a value of 0. A command is also stored after the address, with most of them requiring operands to work.
Comments can be made with a semicolon. All text between the semicolon and the next line break will be ignored by the computer.

The program orients itself to the architecture of a von Neumann processor. This means it takes usage of the program counter (PC), the accumulator (ACC) and the instruction register (IR). The PC is set to 0 by default. If the program is executed, the command at the address stored in the PC will be loaded into the IR. There the command can be executed. After its execution the PC gets increased by one (excluding jumps and stops) and the next command can be loaded into the IR.


A simple program may look like this:
{    00 LDA #4 ; load the value 4 into the ACC
    01 STA 04 ; store the value of the ACC into the 3rd MC
    02 STP    ; stop the program
}
This would be the result after executing the program:
{    00 LDA #4
    01 STA 04
    02 STP
    04 4      ; a stored value
}

A list of all accepted commands:
    {STP    } stops the program
    {LDA n  } loads the value at MC n into the ACC
    {LDA #n } loads the value n into the ACC
    {LDA (n)} loads the value of the MC that has the address that is stored in MC n into the ACC
    {STA n  } stores the value of the ACC into MC n
    {ADD n  } adds the value at MC n to the value of the ACC and stores the result into the ACC
    {ADD #n } adds the value n to the value of the ACC and stores the result into the ACC
    {ADD (n)} adds the value of the MC that has the address that is stored in MC n to the value of the ACC and
    {       } stores the result into the ACC
    {SUB n  } subtracts the value at MC n from the value of the ACC and stores the result into the ACC
    {SUB #n } subtracts the value n from the value of the ACC and stores the result into the ACC
    {SUB (n)} subtracts the value of the MC that has the address that is stored in MC n from the value of the
    {       } ACC and stores the result into the ACC
    {MUL n  } multiplies the value at MC n by the value of the ACC and stores the result into the ACC
    {MUL #n } multiplies the value n by the value of the ACC and stores the result into the ACC
    {MUL (n)} multiplies the value of the MC that has the address that is stored in MC n by the value of the
    {       } ACC and stores the result into the ACC
    {JMP n  } jumps to MC n by setting the PC to n
    {JZE n  } jumps to MC n by setting the PC to n if the value of the ACC is equal to zero
    {JLE n  } jumps to MC n by setting the PC to n if the value of the ACC is less than or equal to zero"""
    },
    "shc_win": {
        "title":    "Shortcuts",
        "geometry": "280x225",

        "combos": """F5
Shift + F5
Ctrl + Z
Ctrl + Shift + Z
Ctrl + Y
Ctrl + Backspace
Shift + Enter
Shift + Tab
Shift + Scroll up
Shift + Scroll down
Ctrl + O
Ctrl + R
Ctrl + S
Ctrl + Shift + S""",

        "actions": """Run program
Run single step
Undo change
Redo change
Redo change
Delete whole word
Line break without address
Switch affected numbers
Increment affected numbers
Decrement affected numbers
Open file
Reload file
Save file
Save file as"""
    },
    "abt_win": {
        "title":    "About",
        "geometry": "310x140",

        "text": """    A simple emulator and editor for Assembly
    Version: 0.1 Alpha
    Made by Blyfh in 2022

    Found a bug? Tell me on
    https://github.com/Blyfh/assemblitor/issues/new
        """
    },
    "demo": """; A simple countdown program
00 JMP 02
01 5
02 LDA 01
03 SUB #1
04 JLE 07
05 STA 01
06 JMP 03
07 STP"""
}