{
    "errors": {
        "NeverStopped":         ("SyntaxError",   "Program was never stopped with command 'STP'."),
        "MaxPrgLength":         ("StopExecution", "Maximum program length exceeded.\n\nCan only have up to {max_adrs} memory cells, not {adrs}."),
        "AdrsNotChronological": ("SyntaxError",   "Address {small_adr} appears after address {big_adr} even though memory cells have to be in chronological order."),
        "AdrNotUnique":         ("SyntaxError",   "Address {adr} appears more than once even though it has to be unique."),
        "CmdHasValOpr":         ("SyntaxError",   "Unsupported operand '{opr_str}' in memory cell {adr}.\n\nOnly commands 'ADD', 'SUB', 'MUL' and 'LDA' support operands with absolute values."),
        "MaxIterationDepth":    ("StopIteration", "Maximum iteration depth exceeded.\n\nCan only jump up to {max_jmps} times to memory cell {adr}."),
        "MissingOpr":           ("SyntaxError",   "Missing operand in memory cell {adr}.\n\nCommand '{cmd}' requires an operand."),
        "ValCellOpr":           ("SyntaxError",   "Unsupported operand '{opr}' in memory cell {adr}.\n\nStored values do not allow operands."),
        "StpCellOpr":           ("SyntaxError",   "Unsupported operand '{opr}' in memory cell {adr}.\n\nCommand 'STP' does not allow operands."),
        "ValNotInt_Load":       ("TypeError",     "Unable to load accumulator value in memory cell {adr}.\n\nValues must be nonnegative integers, not '{val}'."),
        "AdrTokNotInt":         ("TypeError",     "Expected an address, not '{tok}'.\n\nAddresses of memory cells have to be nonnegative integers."),
        "AdrTokIsNegative":     ("ValueError",    "Expected an address, not '{tok}'.\n\nAddresses of memory cells have to be nonnegative."),
        "TokNotValOrCmd":       ("TypeError",     "Expected a command or a value in memory cell {adr}, not '{tok}'."),
        "MaxCelLength":         ("SyntaxError",   "Memory cell {adr} has too many tokens.\n\nCan only have up to 3 tokens (excluding comments): 1. address, 2. command/value, 3. operand."),
        "TokNotVal_Overwrite":  ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a value, not '{tok}' while trying to overwrite it to {new_val}."),
        "TokNotVal_CmdTok":     ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a value, not the command '{tok}' while trying to load its value."),
        "TokNotVal":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a value, not '{tok}' while trying to load its value."),
        "TokNotCmd_EmptyTok":   ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a command, but it is empty."),
        "TokNotCmd_ValTok":     ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a command not the value '{tok}'."),
        "TokNotCmd":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a command not '{tok}'."),
        "TokNotOpr":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an operand, not '{tok}'."),
        "TokNotAdr":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an address, not '{tok}'."),
        "TokNotAdr_EmptyTok":   ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an address, but it is empty."),
        "OprTokNotStr":         ("TypeError",     "Expected to receive a string, not '{opr_str}' while trying to get an operand."),
        "ValOprNotInt":         ("TypeError",     "Expected an operand in memory cell {adr}, not '{opr_str}'.\n\nValues after a '#' have to be integers."),
        "IndOprNotInt":         ("TypeError",     "Expected an operand in memory cell {adr}, not '{opr_str}'.\n\nAddresses nested into brackets have to be nonnegative integers."),
        "IndOprIsNegative":     ("ValueError",    "Expected an operand in memory cell {adr}, not '{opr_str}'.\n\nAddresses nested into brackets have to be nonnegative."),
        "UnknownOpr":           ("TypeError",     "Expected an operand in memory cell {adr}, not '{opr_str}'.\n\nOperands have to point to addresses (format: '<nonnegative int>' or '(<nonnegative int>)') or be absolute values (format: '#<int>')."),
        "DirOprIsNegative":     ("ValueError",    "Expected an operand in memory cell {adr}, not '{opr_str}'.\n\nAddresses have to be nonnegative."),
    },
    "messages": {
        "PrgStateMsg": "\n\nProgram state before crash:\n\n"
    }
}