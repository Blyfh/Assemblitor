{
    "info": {
        "name": "Deutsch (Deutschland)",
        "version": "1.0",
        "authors": ["Blyfh"]
    },
    "error": {
        "PythonVer":            ("Fehler",         "Deine Python-Version wird nicht unterstützt. Bitte nutze Python {min_ver} oder höher."),

        "NeverStopped":         ("SyntaxError",   "Program was never stopped with command 'STP'."),
        "MaxPrgLength":         ("StopExecution", "Maximum program length exceeded. Can only have up to {max_adrs} memory cells, not {adrs}."),
        "AdrsNotChronological": ("SyntaxError",   "Address {small_adr} appears after address {big_adr} even though memory cells have to be in chronological order."),
        "AdrNotUnique":         ("SyntaxError",   "Address {adr} appears more than once even though it has to be unique."),
        "CmdHasValOpr":         ("SyntaxError",   "Only command 'LDA' supports '#<value>' format like '#{opr}'."),
        "UnknownOprTyp":        ("ValueError",    "Unknown operand type: '{opr}'. Operand has to be an address (format '<nonnegative int>' or '(<nonnegative int>)') or an absolute value (format '#<int>')."),
        "MaxIterationDepth":    ("StopIteration", "Maximum iteration depth exceeded. Can only jump up to {max_jmps} times to memory cell {adr}."),
        "ValNotInt_Load":       ("TypeError",     "Unable to load accumulator value in memory cell {adr}. Value must be a nonnegative integer, not '{val}'."),
        "CmdStpHasOpr":         ("SyntaxError",   "Command 'STP' does not take operands. Please remove operand in memory cell {adr}."),
        "MissingOpr":           ("SyntaxError",   "Command {cmd} in memory cell {adr} requires an operand but none was given."),
        "AdrTokNotInt":         ("TypeError",     "Expected an address, not '{tok}'. Address of a memory cell has to be a nonnegative integer."),
        "AdrTokIsNegative":     ("ValueError",    "Expected an address, not '{tok}'. Address of a memory cell has to be nonnegative."),
        "TokNotValOrCmd":       ("TypeError",     "Expected a command or a value in memory cell {adr}, not '{tok}'."),
        "MaxCelLength":         ("SyntaxError",   "Memory cell {adr} has too many tokens. Can only have up to 3 tokens (excluding comments): 1. address, 2. command/value, 3. operand"),
        "TokNotVal_Overwrite":  ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a value, not '{tok}' while trying to overwrite it to {new_val}"),
        "TokNotCmd":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a command, not '{tok}'."),
        "TokNotCmd_EmptyTok":   ("TypeError",     "Expected token {tpos} of memory cell {adr} to be a command, but it is empty."),
        "TokNotOpr":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an operand, not '{tok}'."),
        "TokNotOpr_EmptyTok":   ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an operand, but it is empty."),
        "TokNotAdr":            ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an address, not '{tok}'."),
        "TokNotAdr_EmptyTok":   ("TypeError",     "Expected token {tpos} of memory cell {adr} to be an address, but it is empty."),
        "OprTokNotStr":         ("TypeError",     "Expected to receive a string, not '{opr_str}' while trying to get an operand."),
        "ValOprNotInt":         ("TypeError",     "Expected an operand in memory cell {adr}, not '{opr}'. Value after '#' has to be an integer."),
        "IndOprNotInt":         ("TypeError",     "Expected an operand in memory cell {adr}, not '{opr}'. Address nested into brackets has to be a nonnegative integer."),
        "IndOprIsNegative":     ("ValueError",    "Expected an operand in memory cell {adr}, not '{opr}'. Address nested into brackets has to be nonnegative."),
        "UnknownOpr":           ("TypeError",     "Expected an operand in memory cell {adr}, not '{opr}'. Operand has to be an address (format '<nonnegative int>' or '(<nonnegative int>)') or an absolute value (format '#<int>')."),
        "DirOprIsNegative":     ("ValueError",    "Expected an operand in memory cell {adr}, not '{opr}'. Address has to be nonnegative.")
    },
    "file_mng": {
        "DocumentsDir": "Dokumente",
        "AsmFiles":     "Assembler-Dateien",
        "TxtFiles":     "Textdateien",

        "UnsavedChanges": "Ungespeicherte Änderungen",
        "Save?":          "Programm vor Schließen speichern?",

        "OpenFile": "Datei Öffnen",
        "SaveFile": "Datei Speichern"
    },
    "gui": {
        "title": "Assemblitor",
        "minsize": (637, 500),

        "File":     "Datei",
        "Open":     "Öffnen",
        "Reload":   "Neuladen",
        "Save":     "Speichern",
        "SaveAs":   "Speichern unter",
        "Settings": "Einstellungen",
        "Exit":     "Beenden",

        "Help":      "Hilfe",
        "Assembly":  "Assembly",
        "Shortcuts": "Tastenkombinationen",
        "DemoPrg":   "Demo-Programm",
        "About":     "Über",

        "Run":      "Ausführen",
        "StepMode": "Schritt-für-Schritt-Modus",

        "PC:":  "Befehlszähler:",
        "ACC:": "Akkumulator:",
        "IR:":  "Befehlsregister:"
    },
    "set_win": {
        "title": "Einstellungen"
    },
    "asm_win": {
        "title": "Assembly",
        "minsize": (850, 200),

        "text":  """Dieser Assembly-Dialekt ist eine spaltenbasierte Low-Level-Programmiersprache, die sehr nah an Maschinencode ist. Groß-/Kleinschreibung wird nicht beachtet.

Die Sprache besteht aus einer Folge von Speicherzellen, welche Befehle oder Zahlenwerte speichern können. Jede Speicherzelle beginnt mit ihrer Adresse und endet mit einem Zeilenumbruch. Die Speicherzellen müssen in aufsteigender Reihenfolge sein, aber leere Zellen müssen nicht angegeben werden. Ein Zahlenwert ist immer eine Ganzzahl und wird nach der Adresse gespeichert. Eine leere Speicherzelle wird als eine Zelle mit einem Zahlenwert von 0 interpretiert. Ein Befehl wird auch nach der Adresse angegeben, wobei manche noch ein Operand benötigen.
Kommentare können mit einem Semikolon gemacht werden. Jeglicher Text zwischen dem Semikolon und dem nächsten Zeilenumbruch wird ignoriert.

Das Programm orientiert sich an der Architektur eines Von-Neumann-Prozessors. Das bedeutet, dass es einen Befehlszähler (BZ), einen Zwischenspeicher (genannt Akkumulator oder kurz AKKU) und ein Befehlsregister (BR) benutzt. Zu Beginn ist der BZ auf 0 gesetzt. Wird das Programm ausgeführt, so wird der Befehl an der im BZ gespeicherten Adresse in das BR geladen. Dort wird der Befehl ausgeführt und der BZ um eins erhöht (außer bei Sprüngen und Stopps), sodass der nächste Befehl geladen werden kann.


Ein einfaches Programm könnte so aussehen:
{    00 LDA 04 ; lade den Zahlenwert der vierten Speicherzelle in den AKKU
    01 STA 05 ; speichere den Zahlenwert des AKKUs in die fünfte Speicherzelle
    02 STP    ; stoppe das Programm
    04 42     ; ein gespeicherter Zahlenwert
}
So würde das Programm nach dem Ausführen aussehen:
{    00 LDA 04
    01 STA 05
    02 STP
    03        ; <--- man beachte, dass die vorher verstecke dritte Speicherzelle nun gezeigt wird
    04 42
    05 42
}

Eine Liste aller akzeptierten Befehle:
    {STP    } - stoppt das Programm
    {LDA n  } - lädt den Zahlenwert der Speicherzelle n in den AKKU
    {LDA #n } - lädt den Zahlenwert n in den AKKU
    {LDA (n)} - lädt den Zahlenwert der Speicherzelle, dessen Adresse in Speicherzelle n gespeichert ist, in den AKKU
    {STA n  } - speichert den im AKKU gespeicherten Zahlenwert in Speicherzelle n
    {ADD n  } - speichert die Summe der Zahlenwerte des AKKUs und der Speicherzelle n in den AKKU
    {SUB n  } - speichert die Differenz der Zahlenwerte des AKKUs und der Speicherzelle n in den AKKU
    {MUL n  } - speichert das Produkt der Zahlenwerte des AKKUs und der Speicherzelle n in den AKKU
    {JMP n  } - springt zu Speicherzelle n indem der BZ auf n gesetzt wird
    {JZE n  } - springt zu Speicherzelle n indem der BZ auf n gesetzt wird wenn der im AKKU gespeicherte Zahlenwert 0 ist
    {JLE n  } - springt zu Speicherzelle n indem der BZ auf n gesetzt wird wenn der im AKKU gespeicherte Zahlenwert kleiner oder gleich 0 ist"""
    },
    "shc_win": {
        "title":    "Tastenkombinationen",
        "geometry": "244x110",

        "combos": """Strg + Enter
Shift + Enter
Strg + O
F5
Strg + S
Strg + Shift + S""",

        "actions": """Programm ausführen
adressloser Zeilenumbruch
Datei öffnen
Datei neu laden
Datei speichern
Datei speichern unter"""
    },
    "abt_win": {
        "title":    "Über",
        "geometry": "303x140",

        "text": """    Ein einfacher Emulator und Editor für Assembly
    Version: 0.1 Alpha
    2022 von Blyfh erstellt

    Bug gefunden? Benachrichtige mich unter
    https://github.com/Blyfh/assemblitor/issues/new
        """
    },
    "demo": """; Ein einfaches Countdown-Programm
00 JMP 03
01 5
02 1
03 LDA 01
04 SUB 02
05 JLE 08
06 STA 01
07 JMP 04
08 STP"""
}